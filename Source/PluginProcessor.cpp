/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "ThreadQueue/bond.h"
#include "Appconfig.h"
#include "juce_audio_basics/juce_audio_basics.h"
#include <math.h>
#include "DSPFilters/Dsp.h"

std::vector<juce::IIRFilter*> hpfilters;
std::vector<juce::IIRFilter*> lpfilters;

//==============================================================================
DStortiumAudioProcessor::DStortiumAudioProcessor()
{
    UserParams[HPF]=20.0f;
	UserParams[LPF]=20000.0f;
    UserParams[Drive]=0.0f;
    UserParams[Symmetry]=0.0f;
    UserParams[Mix]=100.0f;
    UserParams[Gain]=0.0f;
    UIUpdateFlag=true;//Request UI update
}

DStortiumAudioProcessor::~DStortiumAudioProcessor()
{
}

//==============================================================================
const String DStortiumAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int DStortiumAudioProcessor::getNumParameters()
{
    return totalNumParam;
}

float DStortiumAudioProcessor::getParameter (int index)
{
    switch(index)
    {
    case HPF:
        return UserParams[HPF];
	case LPF:
        return UserParams[LPF];
    case Drive:
        return UserParams[Drive];
    case Symmetry:
        return UserParams[Symmetry];
    case Mix:
        return UserParams[Mix];
    case Gain:
        return UserParams[Gain];
    default:
        return 0.0f;//invalid index
    }
}

void DStortiumAudioProcessor::setHPFilterCutoff(float cutoff)
{
	for (std::vector<juce::IIRFilter*>::iterator it = hpfilters.begin() ; it != hpfilters.end(); ++it) {
		(*it)->setCoefficients(juce::IIRCoefficients::makeHighPass(getSampleRate(),cutoff));
	}
}

void DStortiumAudioProcessor::setLPFilterCutoff(float cutoff)
{
	for (std::vector<juce::IIRFilter*>::iterator it = lpfilters.begin() ; it != lpfilters.end(); ++it) {
		(*it)->setCoefficients(juce::IIRCoefficients::makeLowPass(getSampleRate(),cutoff));
	}
}

void DStortiumAudioProcessor::setParameter (int index, float newValue)
{
    switch(index) {
    case HPF:
        UserParams[HPF] = newValue;
		_queue.call (bond (&DStortiumAudioProcessor::setHPFilterCutoff, this, newValue));
        break;
    case LPF:
        UserParams[LPF] = newValue;
		_queue.call (bond (&DStortiumAudioProcessor::setLPFilterCutoff, this, newValue));
        break;
    case Drive:
        UserParams[Drive] = newValue;
        break;
    case Symmetry:
        UserParams[Symmetry] = newValue;
        break;
    case Mix:
        UserParams[Mix] = newValue;
        break;
    case Gain:
        UserParams[Gain] = newValue;
        break;
    default:
        return;//invalid index     
    }
}

const String DStortiumAudioProcessor::getParameterName (int index)
{
    switch(index)
    {
    case HPF: return "High Pass Filter";
	case LPF: return "Low Pass Filter";
    case Drive: return "Drive";
    case Symmetry: return "Symmetry";
    case Mix: return "Mix";
    case Gain: return "Output Gain";
    default: return String::empty;
    }
}

const String DStortiumAudioProcessor::getParameterText (int index)
{
    if(index>=0 && index<totalNumParam)
        return String(UserParams[index]);//return parameter value as string
    else return String::empty;
}

const String DStortiumAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String DStortiumAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool DStortiumAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool DStortiumAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool DStortiumAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool DStortiumAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool DStortiumAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double DStortiumAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int DStortiumAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int DStortiumAudioProcessor::getCurrentProgram()
{
    return 0;
}

void DStortiumAudioProcessor::setCurrentProgram (int index)
{
}

const String DStortiumAudioProcessor::getProgramName (int index)
{
    return String();
}

void DStortiumAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void DStortiumAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
	for(int c = 0; c < getNumInputChannels();++c) {
		hpfilters.push_back(new juce::IIRFilter());
		lpfilters.push_back(new juce::IIRFilter());
	}
	setHPFilterCutoff(UserParams[HPF]);
	setLPFilterCutoff(UserParams[LPF]);
	_queue.open();
}

void DStortiumAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void DStortiumAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
	
	long numSamples = buffer.getNumSamples();

	float linGain = pow(10,UserParams[Gain]/10); //db to linear gain conversion
	float linDrive = pow(10,UserParams[Drive]/10); //db to linear drive value

    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, numSamples);

    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
	    
	_queue.process();

	for(int c = 0; c < getNumInputChannels();++c)
	{
		float* data = buffer.getWritePointer(c);

		for(long i=0; i<numSamples;i++) {
			
			float originalData = data[i];
			//Input gain
			data[i] = data[i] * linDrive;
			
			//High Pass Filter
			data[i] = hpfilters[c]->processSingleSampleRaw(data[i]);
			
			//Clipping
			data[i] = tanh(data[i]);

			//Symmetry
			if(UserParams[Symmetry] < 0) {
				if(data[i] < 0) {
					data[i] = (1.0f+0.1f*UserParams[Symmetry])*data[i];
				}
			}
			else {
				if(data[i] > 0) {
					data[i] = (1.0f-0.1f*UserParams[Symmetry])*data[i];
				}
			}
			/*
			//Low Pass Filter
			data[i] = lpfilters[c]->processSingleSampleRaw(data[i]);
			*/
			//Mix
			data[i] = UserParams[Mix]/100*data[i] + ((100-UserParams[Mix])/100)*originalData;

			//Output gain
			data[i]=data[i] * linGain;
			
		}
	}
	
}

//==============================================================================
bool DStortiumAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* DStortiumAudioProcessor::createEditor()
{
    return new DStortiumAudioProcessorEditor (*this);
}

//==============================================================================
void DStortiumAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
	XmlElement root("Root");
	XmlElement *el;
	el = root.createNewChildElement("HPF");
	el->addTextElement(String(UserParams[HPF]));
	el = root.createNewChildElement("LPF");
	el->addTextElement(String(UserParams[LPF]));
	el = root.createNewChildElement("Drive");
	el->addTextElement(String(UserParams[Drive]));
	el = root.createNewChildElement("Symmetry");
	el->addTextElement(String(UserParams[Symmetry]));
	el = root.createNewChildElement("Mix");
	el->addTextElement(String(UserParams[Mix]));
	el = root.createNewChildElement("Gain");
	el->addTextElement(String(UserParams[Gain]));
	copyXmlToBinary(root,destData);
}

void DStortiumAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
	XmlElement* pRoot = getXmlFromBinary(data,sizeInBytes);
	if(pRoot!=NULL)
	{
		forEachXmlChildElement((*pRoot),pChild)
		{
			if(pChild->hasTagName("HPF"))
			{
				String text = pChild->getAllSubText();
				setParameter(HPF,text.getFloatValue());
			}
			else if(pChild->hasTagName("LPF"))
			{
				String text = pChild->getAllSubText();
				setParameter(LPF,text.getFloatValue());
			}
			else if(pChild->hasTagName("Drive"))
			{
				String text = pChild->getAllSubText();
				setParameter(Drive,text.getFloatValue());
			}
			else if(pChild->hasTagName("Symmetry"))
			{
				String text = pChild->getAllSubText();
				setParameter(Symmetry,text.getFloatValue());
			}
			else if(pChild->hasTagName("Mix"))
			{
				String text = pChild->getAllSubText();
				setParameter(Mix,text.getFloatValue());
			}
			else if(pChild->hasTagName("Gain"))
			{
				String text = pChild->getAllSubText();
				setParameter(Gain,text.getFloatValue());
			}
		}
		delete pRoot;
		UIUpdateFlag=true;//Request UI update
	}
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new DStortiumAudioProcessor();
}
